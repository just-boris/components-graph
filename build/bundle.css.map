{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Table.svelte",
    "../../Graph.svelte",
    "../../GraphNode.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Table from './Table.svelte';\n  import Graph from './Graph.svelte';\n  import Preview from './Preview.svelte';\n  import data from './data/components.js';\n  import { findTransitiveDeps } from './utils/data.js';\n\n  // remove missing dependencies\n  data.forEach(d => {\n    d.deps = d.deps.filter(dep => data.find(d => d.name === dep));\n  });\n\n  let selectedItem = null;\n  let selectedTransitive = [];\n\n  function handleSelection(item) {\n    selectedItem = item;\n    selectedTransitive = selectedItem ? findTransitiveDeps(selectedItem, data) : [];\n  }\n</script>\n\n<style>\n  main {\n    font: 14px sans-serif;\n  }\n\n  .grid {\n    display: grid;\n    grid-template-columns: 280px 1fr;\n    grid-gap: 20px;\n  }\n</style>\n\n<main class=\"grid\">\n  {#if selectedItem}\n    <Preview {selectedItem} {selectedTransitive} />\n  {:else}\n    <Table {data} />\n  {/if}\n  <Graph {data} {selectedItem} {selectedTransitive} onSelect={handleSelection} />\n</main>\n",
    "<script>\n  import { findTransitiveDeps } from './utils/data.js';\n\n  export let data;\n</script>\n\n<style>\n  .table {\n    border-spacing: 0;\n  }\n\n  .table th {\n    padding: 5px 10px;\n    border-bottom: 1px solid #777;\n  }\n\n  .table td {\n    padding: 5px 10px;\n    border-right: 1px solid #eee;\n  }\n\n  .number-cell {\n    text-align: right;\n  }\n</style>\n\n<table class=\"table\">\n  <tr>\n    <th>Component</th>\n    <th width=\"40px\">Direct deps</th>\n    <th width=\"40px\">Transitive deps</th>\n  </tr>\n  {#each data as item}\n    <tr>\n      <td>{item.name}</td>\n      <td class=\"number-cell\">{item.deps.length}</td>\n      <td class=\"number-cell\">{findTransitiveDeps(item, data).length}</td>\n    </tr>\n  {/each}\n</table>\n",
    "<script>\n  import { onMount, onDestroy } from 'svelte';\n  import { forceSimulation, forceLink, forceManyBody, forceCenter } from 'd3-force';\n\n  import forceBorders from './utils/force-borders.js';\n  import GraphNode from './GraphNode.svelte';\n\n  export let data;\n  export let selectedItem;\n  export let selectedTransitive;\n  export let onSelect;\n\n  let svg;\n  let simulation;\n  let selectedNode;\n\n  let links = data.flatMap(d => d.deps.map(dep => ({ source: d.name, target: dep })));\n  let nodes = data.map(d => ({ id: d.name, deps: d.deps }));\n\n  $: selectedNode = selectedItem && nodes.find(node => node.id === selectedItem.name);\n\n  function updateSimulation() {\n    if (simulation) {\n      simulation.stop();\n    }\n    const { width, height } = svg.getBoundingClientRect();\n\n    simulation = forceSimulation(nodes)\n      .force(\n        'link',\n        forceLink(links)\n          .id(d => d.id)\n          .distance(80)\n      )\n      .force(\n        'charge',\n        forceManyBody()\n          .strength(-60)\n          .distanceMax(Math.min(width, height) * 0.7)\n      )\n      .force('borders', forceBorders(width, height))\n      .force('center', forceCenter(width / 2, height / 2));\n\n    simulation.on('tick', () => {\n      nodes = nodes;\n      links = links;\n    });\n  }\n\n  onMount(() => {\n    updateSimulation();\n  });\n\n  onDestroy(() => {\n    if (simulation) {\n      simulation.stop();\n    }\n  });\n\n  function handleSelection(node) {\n    if (selectedNode === node) {\n      onSelect(null);\n    } else {\n      onSelect(data.find(d => d.name === node.id));\n    }\n  }\n</script>\n\n<style>\n  svg {\n    width: 100%;\n    height: 100vh;\n  }\n\n  .chart-link {\n    stroke: #aab7b8;\n  }\n\n  .chart-text {\n    pointer-events: none;\n    fill: #16191f;\n    text-anchor: middle;\n  }\n\n  .chart-text-dimmed {\n    fill: #879596;\n  }\n\n  .chart-arrow {\n    fill: #aab7b8;\n  }\n</style>\n\n<svelte:window on:resize={updateSimulation} />\n<svg bind:this={svg}>\n  <defs>\n    <marker\n      id=\"arrow\"\n      viewBox=\"0 0 6 6\"\n      refX=\"12\"\n      refY=\"3\"\n      markerUnits=\"strokeWidth\"\n      markerWidth=\"6\"\n      markerHeight=\"6\"\n      orient=\"auto\">\n      <path d=\"M 0 0 L 6 3 L 0 6 z\" class=\"chart-arrow\" />\n    </marker>\n  </defs>\n  <g>\n    {#each links as link}\n      <line\n        class=\"chart-link\"\n        marker-end=\"url(#arrow)\"\n        x1={link.source.x}\n        y1={link.source.y}\n        x2={link.target.x}\n        y2={link.target.y} />\n    {/each}\n  </g>\n  <g>\n    {#each nodes as node}\n      <GraphNode\n        {node}\n        isSelected={node === selectedNode}\n        isTransitive={selectedTransitive.includes(node.id)}\n        onSelect={() => handleSelection(node)}\n        onDragStart={resetSimulation}\n        onDragEnd={resumeSimulation} />\n    {/each}\n  </g>\n  <g>\n    {#each nodes as node}\n      <text\n        class=\"chart-text\"\n        class:chart-text-dimmed={selectedNode && selectedNode !== node && !selectedTransitive.includes(node.id)}\n        dy=\"-12\"\n        x={node.x}\n        y={node.y}>\n        {node.id}\n      </text>\n    {/each}\n  </g>\n</svg>\n",
    "<script>\n  import dragBehavior from './utils/drag.js';\n\n  export let node;\n  export let isSelected;\n  export let isTransitive;\n  export let onSelect;\n  export let onDragStart;\n  export let onDragEnd;\n\n  function getDragOptions(node) {\n    return {\n      start() {\n        onDragStart();\n        node.fx = node.x;\n        node.fy = node.y;\n      },\n      move({ x, y }) {\n        node.fx = x;\n        node.fy = y;\n      },\n      end() {\n        onDragEnd();\n        node.fx = null;\n        node.fy = null;\n      }\n    };\n  }\n</script>\n\n<style>\n  .chart-node {\n    fill: #687078;\n    /*stroke: #aab7b8;*/\n  }\n\n  .chart-node-complex {\n    fill: #ec7211;\n  }\n\n  .chart-node-selected {\n    fill: #0073bb;\n  }\n\n  .chart-node-transitive {\n    fill: #00a1c9;\n  }\n</style>\n\n<circle\n  on:click={onSelect}\n  use:dragBehavior={getDragOptions(node)}\n  class=\"chart-node\"\n  class:chart-node-complex={node.deps.length > 0}\n  class:chart-node-selected={isSelected}\n  class:chart-node-transitive={isTransitive}\n  r=\"7\"\n  cx={node.x}\n  cy={node.y} />\n"
  ],
  "names": [],
  "mappings": "AAsBE,IAAI,cAAC,CAAC,AACJ,IAAI,CAAE,IAAI,CAAC,UAAU,AACvB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,KAAK,CAAC,GAAG,CAChC,QAAQ,CAAE,IAAI,AAChB,CAAC;ACvBD,MAAM,4BAAC,CAAC,AACN,cAAc,CAAE,CAAC,AACnB,CAAC,AAED,oBAAM,CAAC,EAAE,cAAC,CAAC,AACT,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC/B,CAAC,AAED,oBAAM,CAAC,EAAE,cAAC,CAAC,AACT,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,YAAY,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC9B,CAAC,AAED,YAAY,4BAAC,CAAC,AACZ,UAAU,CAAE,KAAK,AACnB,CAAC;AC8CD,GAAG,eAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,AACf,CAAC,AAED,WAAW,eAAC,CAAC,AACX,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,WAAW,eAAC,CAAC,AACX,cAAc,CAAE,IAAI,CACpB,IAAI,CAAE,OAAO,CACb,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,kBAAkB,eAAC,CAAC,AAClB,IAAI,CAAE,OAAO,AACf,CAAC,AAED,YAAY,eAAC,CAAC,AACZ,IAAI,CAAE,OAAO,AACf,CAAC;AC3DD,WAAW,aAAC,CAAC,AACX,IAAI,CAAE,OAAO,AAEf,CAAC,AAED,mBAAmB,aAAC,CAAC,AACnB,IAAI,CAAE,OAAO,AACf,CAAC,AAED,oBAAoB,aAAC,CAAC,AACpB,IAAI,CAAE,OAAO,AACf,CAAC,AAED,sBAAsB,aAAC,CAAC,AACtB,IAAI,CAAE,OAAO,AACf,CAAC"
}